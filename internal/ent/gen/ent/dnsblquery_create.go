// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblquery"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblresponse"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/ip"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DNSBLQueryCreate is the builder for creating a DNSBLQuery entity.
type DNSBLQueryCreate struct {
	config
	mutation *DNSBLQueryMutation
	hooks    []Hook
}

// AddResponseIDs adds the responses edge to DNSBLResponse by ids.
func (dqc *DNSBLQueryCreate) AddResponseIDs(ids ...string) *DNSBLQueryCreate {
	dqc.mutation.AddResponseIDs(ids...)
	return dqc
}

// AddResponses adds the responses edges to DNSBLResponse.
func (dqc *DNSBLQueryCreate) AddResponses(d ...*DNSBLResponse) *DNSBLQueryCreate {
	ids := make([]string, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dqc.AddResponseIDs(ids...)
}

// SetIPAddressID sets the ip_address edge to IP by id.
func (dqc *DNSBLQueryCreate) SetIPAddressID(id string) *DNSBLQueryCreate {
	dqc.mutation.SetIPAddressID(id)
	return dqc
}

// SetNillableIPAddressID sets the ip_address edge to IP by id if the given value is not nil.
func (dqc *DNSBLQueryCreate) SetNillableIPAddressID(id *string) *DNSBLQueryCreate {
	if id != nil {
		dqc = dqc.SetIPAddressID(*id)
	}
	return dqc
}

// SetIPAddress sets the ip_address edge to IP.
func (dqc *DNSBLQueryCreate) SetIPAddress(i *IP) *DNSBLQueryCreate {
	return dqc.SetIPAddressID(i.ID)
}

// Mutation returns the DNSBLQueryMutation object of the builder.
func (dqc *DNSBLQueryCreate) Mutation() *DNSBLQueryMutation {
	return dqc.mutation
}

// Save creates the DNSBLQuery in the database.
func (dqc *DNSBLQueryCreate) Save(ctx context.Context) (*DNSBLQuery, error) {
	var (
		err  error
		node *DNSBLQuery
	)
	if len(dqc.hooks) == 0 {
		if err = dqc.check(); err != nil {
			return nil, err
		}
		node, err = dqc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSBLQueryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dqc.check(); err != nil {
				return nil, err
			}
			dqc.mutation = mutation
			node, err = dqc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dqc.hooks) - 1; i >= 0; i-- {
			mut = dqc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dqc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dqc *DNSBLQueryCreate) SaveX(ctx context.Context) *DNSBLQuery {
	v, err := dqc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (dqc *DNSBLQueryCreate) check() error {
	return nil
}

func (dqc *DNSBLQueryCreate) sqlSave(ctx context.Context) (*DNSBLQuery, error) {
	_node, _spec := dqc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dqc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = string(id)
	return _node, nil
}

func (dqc *DNSBLQueryCreate) createSpec() (*DNSBLQuery, *sqlgraph.CreateSpec) {
	var (
		_node = &DNSBLQuery{config: dqc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dnsblquery.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dnsblquery.FieldID,
			},
		}
	)
	if nodes := dqc.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   dnsblquery.ResponsesTable,
			Columns: []string{dnsblquery.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: dnsblresponse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dqc.mutation.IPAddressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsblquery.IPAddressTable,
			Columns: []string{dnsblquery.IPAddressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: ip.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DNSBLQueryCreateBulk is the builder for creating a bulk of DNSBLQuery entities.
type DNSBLQueryCreateBulk struct {
	config
	builders []*DNSBLQueryCreate
}

// Save creates the DNSBLQuery entities in the database.
func (dqcb *DNSBLQueryCreateBulk) Save(ctx context.Context) ([]*DNSBLQuery, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dqcb.builders))
	nodes := make([]*DNSBLQuery, len(dqcb.builders))
	mutators := make([]Mutator, len(dqcb.builders))
	for i := range dqcb.builders {
		func(i int, root context.Context) {
			builder := dqcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DNSBLQueryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dqcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dqcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = string(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dqcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (dqcb *DNSBLQueryCreateBulk) SaveX(ctx context.Context) []*DNSBLQuery {
	v, err := dqcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
