// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/operation"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// Operation is the model entity for the Operation schema.
type Operation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Type holds the value of the "type" field.
	Type operation.Type `json:"type,omitempty"`
	// IPAddress holds the value of the "ip_address" field.
	IPAddress string `json:"ip_address,omitempty"`
	// Status holds the value of the "status" field.
	Status operation.Status `json:"status,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// DoneAt holds the value of the "done_at" field.
	DoneAt time.Time `json:"done_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Operation) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // type
		&sql.NullString{}, // ip_address
		&sql.NullString{}, // status
		&sql.NullString{}, // error
		&sql.NullTime{},   // done_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Operation fields.
func (o *Operation) assignValues(values ...interface{}) error {
	if m, n := len(values), len(operation.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		o.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		o.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		o.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field type", values[2])
	} else if value.Valid {
		o.Type = operation.Type(value.String)
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ip_address", values[3])
	} else if value.Valid {
		o.IPAddress = value.String
	}
	if value, ok := values[4].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[4])
	} else if value.Valid {
		o.Status = operation.Status(value.String)
	}
	if value, ok := values[5].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field error", values[5])
	} else if value.Valid {
		o.Error = value.String
	}
	if value, ok := values[6].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field done_at", values[6])
	} else if value.Valid {
		o.DoneAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this Operation.
// Note that, you need to call Operation.Unwrap() before calling this method, if this Operation
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Operation) Update() *OperationUpdateOne {
	return (&OperationClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Operation) Unwrap() *Operation {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Operation is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Operation) String() string {
	var builder strings.Builder
	builder.WriteString("Operation(")
	builder.WriteString(fmt.Sprintf("id=%v", o.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(o.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(o.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteString(", ip_address=")
	builder.WriteString(o.IPAddress)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", error=")
	builder.WriteString(o.Error)
	builder.WriteString(", done_at=")
	builder.WriteString(o.DoneAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Operations is a parsable slice of Operation.
type Operations []*Operation

func (o Operations) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
