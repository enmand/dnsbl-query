// Code generated by entc, DO NOT EDIT.

package dnsblquery

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the dnsblquery type in the database.
	Label = "dnsbl_query"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"

	// EdgeResponses holds the string denoting the responses edge name in mutations.
	EdgeResponses = "responses"
	// EdgeIPAddress holds the string denoting the ip_address edge name in mutations.
	EdgeIPAddress = "ip_address"

	// Table holds the table name of the dnsblquery in the database.
	Table = "dnsbl_queries"
	// ResponsesTable is the table the holds the responses relation/edge.
	ResponsesTable = "dnsbl_responses"
	// ResponsesInverseTable is the table name for the DNSBLResponse entity.
	// It exists in this package in order to avoid circular dependency with the "dnsblresponse" package.
	ResponsesInverseTable = "dnsbl_responses"
	// ResponsesColumn is the table column denoting the responses relation/edge.
	ResponsesColumn = "dnsbl_query_responses"
	// IPAddressTable is the table the holds the ip_address relation/edge.
	IPAddressTable = "dnsbl_queries"
	// IPAddressInverseTable is the table name for the IP entity.
	// It exists in this package in order to avoid circular dependency with the "ip" package.
	IPAddressInverseTable = "ips"
	// IPAddressColumn is the table column denoting the ip_address relation/edge.
	IPAddressColumn = "ip_queries"
)

// Columns holds all SQL columns for dnsblquery fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the DNSBLQuery type.
var ForeignKeys = []string{
	"ip_queries",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the id field.
	DefaultID func() uuid.UUID
)
