// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblresponse"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DNSBLResponseUpdate is the builder for updating DNSBLResponse entities.
type DNSBLResponseUpdate struct {
	config
	hooks    []Hook
	mutation *DNSBLResponseMutation
}

// Where adds a new predicate for the builder.
func (dru *DNSBLResponseUpdate) Where(ps ...predicate.DNSBLResponse) *DNSBLResponseUpdate {
	dru.mutation.predicates = append(dru.mutation.predicates, ps...)
	return dru
}

// SetCode sets the code field.
func (dru *DNSBLResponseUpdate) SetCode(s string) *DNSBLResponseUpdate {
	dru.mutation.SetCode(s)
	return dru
}

// SetDescription sets the description field.
func (dru *DNSBLResponseUpdate) SetDescription(s string) *DNSBLResponseUpdate {
	dru.mutation.SetDescription(s)
	return dru
}

// Mutation returns the DNSBLResponseMutation object of the builder.
func (dru *DNSBLResponseUpdate) Mutation() *DNSBLResponseMutation {
	return dru.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (dru *DNSBLResponseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dru.hooks) == 0 {
		affected, err = dru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSBLResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dru.mutation = mutation
			affected, err = dru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dru.hooks) - 1; i >= 0; i-- {
			mut = dru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dru *DNSBLResponseUpdate) SaveX(ctx context.Context) int {
	affected, err := dru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dru *DNSBLResponseUpdate) Exec(ctx context.Context) error {
	_, err := dru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dru *DNSBLResponseUpdate) ExecX(ctx context.Context) {
	if err := dru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (dru *DNSBLResponseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dnsblresponse.Table,
			Columns: dnsblresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dnsblresponse.FieldID,
			},
		},
	}
	if ps := dru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dru.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsblresponse.FieldCode,
		})
	}
	if value, ok := dru.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsblresponse.FieldDescription,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsblresponse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DNSBLResponseUpdateOne is the builder for updating a single DNSBLResponse entity.
type DNSBLResponseUpdateOne struct {
	config
	hooks    []Hook
	mutation *DNSBLResponseMutation
}

// SetCode sets the code field.
func (druo *DNSBLResponseUpdateOne) SetCode(s string) *DNSBLResponseUpdateOne {
	druo.mutation.SetCode(s)
	return druo
}

// SetDescription sets the description field.
func (druo *DNSBLResponseUpdateOne) SetDescription(s string) *DNSBLResponseUpdateOne {
	druo.mutation.SetDescription(s)
	return druo
}

// Mutation returns the DNSBLResponseMutation object of the builder.
func (druo *DNSBLResponseUpdateOne) Mutation() *DNSBLResponseMutation {
	return druo.mutation
}

// Save executes the query and returns the updated entity.
func (druo *DNSBLResponseUpdateOne) Save(ctx context.Context) (*DNSBLResponse, error) {
	var (
		err  error
		node *DNSBLResponse
	)
	if len(druo.hooks) == 0 {
		node, err = druo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSBLResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			druo.mutation = mutation
			node, err = druo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(druo.hooks) - 1; i >= 0; i-- {
			mut = druo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, druo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (druo *DNSBLResponseUpdateOne) SaveX(ctx context.Context) *DNSBLResponse {
	node, err := druo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (druo *DNSBLResponseUpdateOne) Exec(ctx context.Context) error {
	_, err := druo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (druo *DNSBLResponseUpdateOne) ExecX(ctx context.Context) {
	if err := druo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (druo *DNSBLResponseUpdateOne) sqlSave(ctx context.Context) (_node *DNSBLResponse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dnsblresponse.Table,
			Columns: dnsblresponse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dnsblresponse.FieldID,
			},
		},
	}
	id, ok := druo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing DNSBLResponse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := druo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsblresponse.FieldCode,
		})
	}
	if value, ok := druo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsblresponse.FieldDescription,
		})
	}
	_node = &DNSBLResponse{config: druo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, druo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{dnsblresponse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
