// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (dq *DNSBLQueryQuery) CollectFields(ctx context.Context, satisfies ...string) *DNSBLQueryQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		dq = dq.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return dq
}

func (dq *DNSBLQueryQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *DNSBLQueryQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "ip_address":
			dq = dq.WithIPAddress(func(query *IPQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return dq
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (dr *DNSBLResponseQuery) CollectFields(ctx context.Context, satisfies ...string) *DNSBLResponseQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		dr = dr.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return dr
}

func (dr *DNSBLResponseQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *DNSBLResponseQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "query":
			dr = dr.WithQuery(func(query *DNSBLQueryQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return dr
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (i *IPQuery) CollectFields(ctx context.Context, satisfies ...string) *IPQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return i
}

func (i *IPQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *IPQuery {
	for _, field := range graphql.CollectFields(ctx, field.Selections, satisfies) {
		switch field.Name {
		case "queries":
			i = i.WithQueries(func(query *DNSBLQueryQuery) {
				query.collectField(ctx, field)
			})
		}
	}
	return i
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (u *UserQuery) CollectFields(ctx context.Context, satisfies ...string) *UserQuery {
	if fc := graphql.GetFieldContext(ctx); fc != nil {
		u = u.collectField(graphql.GetOperationContext(ctx), fc.Field, satisfies...)
	}
	return u
}

func (u *UserQuery) collectField(ctx *graphql.OperationContext, field graphql.CollectedField, satisfies ...string) *UserQuery {
	return u
}
