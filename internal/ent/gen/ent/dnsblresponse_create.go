// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblquery"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblresponse"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
)

// DNSBLResponseCreate is the builder for creating a DNSBLResponse entity.
type DNSBLResponseCreate struct {
	config
	mutation *DNSBLResponseMutation
	hooks    []Hook
}

// SetCode sets the code field.
func (drc *DNSBLResponseCreate) SetCode(s string) *DNSBLResponseCreate {
	drc.mutation.SetCode(s)
	return drc
}

// SetDescription sets the description field.
func (drc *DNSBLResponseCreate) SetDescription(s string) *DNSBLResponseCreate {
	drc.mutation.SetDescription(s)
	return drc
}

// SetID sets the id field.
func (drc *DNSBLResponseCreate) SetID(u uuid.UUID) *DNSBLResponseCreate {
	drc.mutation.SetID(u)
	return drc
}

// SetQueryID sets the query edge to DNSBLQuery by id.
func (drc *DNSBLResponseCreate) SetQueryID(id uuid.UUID) *DNSBLResponseCreate {
	drc.mutation.SetQueryID(id)
	return drc
}

// SetQuery sets the query edge to DNSBLQuery.
func (drc *DNSBLResponseCreate) SetQuery(d *DNSBLQuery) *DNSBLResponseCreate {
	return drc.SetQueryID(d.ID)
}

// Mutation returns the DNSBLResponseMutation object of the builder.
func (drc *DNSBLResponseCreate) Mutation() *DNSBLResponseMutation {
	return drc.mutation
}

// Save creates the DNSBLResponse in the database.
func (drc *DNSBLResponseCreate) Save(ctx context.Context) (*DNSBLResponse, error) {
	var (
		err  error
		node *DNSBLResponse
	)
	drc.defaults()
	if len(drc.hooks) == 0 {
		if err = drc.check(); err != nil {
			return nil, err
		}
		node, err = drc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DNSBLResponseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = drc.check(); err != nil {
				return nil, err
			}
			drc.mutation = mutation
			node, err = drc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(drc.hooks) - 1; i >= 0; i-- {
			mut = drc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, drc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (drc *DNSBLResponseCreate) SaveX(ctx context.Context) *DNSBLResponse {
	v, err := drc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (drc *DNSBLResponseCreate) defaults() {
	if _, ok := drc.mutation.ID(); !ok {
		v := dnsblresponse.DefaultID()
		drc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (drc *DNSBLResponseCreate) check() error {
	if _, ok := drc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := drc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	if _, ok := drc.mutation.QueryID(); !ok {
		return &ValidationError{Name: "query", err: errors.New("ent: missing required edge \"query\"")}
	}
	return nil
}

func (drc *DNSBLResponseCreate) sqlSave(ctx context.Context) (*DNSBLResponse, error) {
	_node, _spec := drc.createSpec()
	if err := sqlgraph.CreateNode(ctx, drc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (drc *DNSBLResponseCreate) createSpec() (*DNSBLResponse, *sqlgraph.CreateSpec) {
	var (
		_node = &DNSBLResponse{config: drc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: dnsblresponse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: dnsblresponse.FieldID,
			},
		}
	)
	if id, ok := drc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := drc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsblresponse.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := drc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: dnsblresponse.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := drc.mutation.QueryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dnsblresponse.QueryTable,
			Columns: []string{dnsblresponse.QueryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: dnsblquery.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DNSBLResponseCreateBulk is the builder for creating a bulk of DNSBLResponse entities.
type DNSBLResponseCreateBulk struct {
	config
	builders []*DNSBLResponseCreate
}

// Save creates the DNSBLResponse entities in the database.
func (drcb *DNSBLResponseCreateBulk) Save(ctx context.Context) ([]*DNSBLResponse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(drcb.builders))
	nodes := make([]*DNSBLResponse, len(drcb.builders))
	mutators := make([]Mutator, len(drcb.builders))
	for i := range drcb.builders {
		func(i int, root context.Context) {
			builder := drcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DNSBLResponseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, drcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, drcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, drcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (drcb *DNSBLResponseCreateBulk) SaveX(ctx context.Context) []*DNSBLResponse {
	v, err := drcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
