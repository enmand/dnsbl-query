// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/base64"
	"errors"
	"fmt"
	"io"
	"strconv"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblquery"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblresponse"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/ip"
	"github.com/facebook/ent/dialect/sql"
	"github.com/vektah/gqlparser/v2/gqlerror"
	"github.com/vmihailenco/msgpack/v5"
)

// OrderDirection defines the directions in which to order a list of items.
type OrderDirection string

const (
	// OrderDirectionAsc specifies an ascending order.
	OrderDirectionAsc OrderDirection = "ASC"
	// OrderDirectionDesc specifies a descending order.
	OrderDirectionDesc OrderDirection = "DESC"
)

// Validate the order direction value.
func (o OrderDirection) Validate() error {
	if o != OrderDirectionAsc && o != OrderDirectionDesc {
		return fmt.Errorf("%s is not a valid OrderDirection", o)
	}
	return nil
}

// String implements fmt.Stringer interface.
func (o OrderDirection) String() string {
	return string(o)
}

// MarshalGQL implements graphql.Marshaler interface.
func (o OrderDirection) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(o.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (o *OrderDirection) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("order direction %T must be a string", val)
	}
	*o = OrderDirection(str)
	return o.Validate()
}

func (o OrderDirection) reverse() OrderDirection {
	if o == OrderDirectionDesc {
		return OrderDirectionAsc
	}
	return OrderDirectionDesc
}

func (o OrderDirection) orderFunc(field string) OrderFunc {
	if o == OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

func cursorsToPredicates(direction OrderDirection, after, before *Cursor, field, idField string) []func(s *sql.Selector) {
	var predicates []func(s *sql.Selector)
	if after != nil {
		if after.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeGT
			} else {
				predicate = sql.CompositeLT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					after.Value, after.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.GT
			} else {
				predicate = sql.LT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					after.ID,
				))
			})
		}
	}
	if before != nil {
		if before.Value != nil {
			var predicate func([]string, ...interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.CompositeLT
			} else {
				predicate = sql.CompositeGT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.Columns(field, idField),
					before.Value, before.ID,
				))
			})
		} else {
			var predicate func(string, interface{}) *sql.Predicate
			if direction == OrderDirectionAsc {
				predicate = sql.LT
			} else {
				predicate = sql.GT
			}
			predicates = append(predicates, func(s *sql.Selector) {
				s.Where(predicate(
					s.C(idField),
					before.ID,
				))
			})
		}
	}
	return predicates
}

// PageInfo of a connection type.
type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *Cursor `json:"startCursor"`
	EndCursor       *Cursor `json:"endCursor"`
}

// Cursor of an edge type.
type Cursor struct {
	ID    [16]byte `msgpack:"i"`
	Value Value    `msgpack:"v,omitempty"`
}

// MarshalGQL implements graphql.Marshaler interface.
func (c Cursor) MarshalGQL(w io.Writer) {
	quote := []byte{'"'}
	w.Write(quote)
	defer w.Write(quote)
	wc := base64.NewEncoder(base64.RawStdEncoding, w)
	defer wc.Close()
	_ = msgpack.NewEncoder(wc).Encode(c)
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (c *Cursor) UnmarshalGQL(v interface{}) error {
	s, ok := v.(string)
	if !ok {
		return fmt.Errorf("%T is not a string", v)
	}
	if err := msgpack.NewDecoder(
		base64.NewDecoder(
			base64.RawStdEncoding,
			strings.NewReader(s),
		),
	).Decode(c); err != nil {
		return fmt.Errorf("cannot decode cursor: %w", err)
	}
	return nil
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func getCollectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	field := fc.Field

walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Name == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return getCollectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

// DNSBLQueryEdge is the edge representation of DNSBLQuery.
type DNSBLQueryEdge struct {
	Node   *DNSBLQuery `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// DNSBLQueryConnection is the connection containing edges to DNSBLQuery.
type DNSBLQueryConnection struct {
	Edges      []*DNSBLQueryEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

// DNSBLQueryPaginateOption enables pagination customization.
type DNSBLQueryPaginateOption func(*dNSBLQueryPager) error

// WithDNSBLQueryOrder configures pagination ordering.
func WithDNSBLQueryOrder(order *DNSBLQueryOrder) DNSBLQueryPaginateOption {
	if order == nil {
		order = DefaultDNSBLQueryOrder
	}
	o := *order
	return func(pager *dNSBLQueryPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDNSBLQueryOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDNSBLQueryFilter configures pagination filter.
func WithDNSBLQueryFilter(filter func(*DNSBLQueryQuery) (*DNSBLQueryQuery, error)) DNSBLQueryPaginateOption {
	return func(pager *dNSBLQueryPager) error {
		if filter == nil {
			return errors.New("DNSBLQueryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dNSBLQueryPager struct {
	order  *DNSBLQueryOrder
	filter func(*DNSBLQueryQuery) (*DNSBLQueryQuery, error)
}

func newDNSBLQueryPager(opts []DNSBLQueryPaginateOption) (*dNSBLQueryPager, error) {
	pager := &dNSBLQueryPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDNSBLQueryOrder
	}
	return pager, nil
}

func (p *dNSBLQueryPager) applyFilter(query *DNSBLQueryQuery) (*DNSBLQueryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dNSBLQueryPager) toCursor(dq *DNSBLQuery) Cursor {
	return p.order.Field.toCursor(dq)
}

func (p *dNSBLQueryPager) applyCursors(query *DNSBLQueryQuery, after, before *Cursor) *DNSBLQueryQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDNSBLQueryOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *dNSBLQueryPager) applyOrder(query *DNSBLQueryQuery, reverse bool) *DNSBLQueryQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDNSBLQueryOrder.Field {
		query = query.Order(Asc(DefaultDNSBLQueryOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to DNSBLQuery.
func (dq *DNSBLQueryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DNSBLQueryPaginateOption,
) (*DNSBLQueryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDNSBLQueryPager(opts)
	if err != nil {
		return nil, err
	}

	if dq, err = pager.applyFilter(dq); err != nil {
		return nil, err
	}

	conn := &DNSBLQueryConnection{Edges: []*DNSBLQueryEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := dq.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := dq.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	dq = pager.applyCursors(dq, after, before)
	dq = pager.applyOrder(dq, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		dq = dq.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		dq = dq.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := dq.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *DNSBLQuery
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DNSBLQuery {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DNSBLQuery {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DNSBLQueryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DNSBLQueryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// DNSBLQueryOrderField defines the ordering field of DNSBLQuery.
type DNSBLQueryOrderField struct {
	field    string
	toCursor func(*DNSBLQuery) Cursor
}

// DNSBLQueryOrder defines the ordering of DNSBLQuery.
type DNSBLQueryOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *DNSBLQueryOrderField `json:"field"`
}

// DefaultDNSBLQueryOrder is the default ordering of DNSBLQuery.
var DefaultDNSBLQueryOrder = &DNSBLQueryOrder{
	Direction: OrderDirectionAsc,
	Field: &DNSBLQueryOrderField{
		field: dnsblquery.FieldID,
		toCursor: func(dq *DNSBLQuery) Cursor {
			return Cursor{ID: dq.ID}
		},
	},
}

// DNSBLResponseEdge is the edge representation of DNSBLResponse.
type DNSBLResponseEdge struct {
	Node   *DNSBLResponse `json:"node"`
	Cursor Cursor         `json:"cursor"`
}

// DNSBLResponseConnection is the connection containing edges to DNSBLResponse.
type DNSBLResponseConnection struct {
	Edges      []*DNSBLResponseEdge `json:"edges"`
	PageInfo   PageInfo             `json:"pageInfo"`
	TotalCount int                  `json:"totalCount"`
}

// DNSBLResponsePaginateOption enables pagination customization.
type DNSBLResponsePaginateOption func(*dNSBLResponsePager) error

// WithDNSBLResponseOrder configures pagination ordering.
func WithDNSBLResponseOrder(order *DNSBLResponseOrder) DNSBLResponsePaginateOption {
	if order == nil {
		order = DefaultDNSBLResponseOrder
	}
	o := *order
	return func(pager *dNSBLResponsePager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultDNSBLResponseOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithDNSBLResponseFilter configures pagination filter.
func WithDNSBLResponseFilter(filter func(*DNSBLResponseQuery) (*DNSBLResponseQuery, error)) DNSBLResponsePaginateOption {
	return func(pager *dNSBLResponsePager) error {
		if filter == nil {
			return errors.New("DNSBLResponseQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type dNSBLResponsePager struct {
	order  *DNSBLResponseOrder
	filter func(*DNSBLResponseQuery) (*DNSBLResponseQuery, error)
}

func newDNSBLResponsePager(opts []DNSBLResponsePaginateOption) (*dNSBLResponsePager, error) {
	pager := &dNSBLResponsePager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultDNSBLResponseOrder
	}
	return pager, nil
}

func (p *dNSBLResponsePager) applyFilter(query *DNSBLResponseQuery) (*DNSBLResponseQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *dNSBLResponsePager) toCursor(dr *DNSBLResponse) Cursor {
	return p.order.Field.toCursor(dr)
}

func (p *dNSBLResponsePager) applyCursors(query *DNSBLResponseQuery, after, before *Cursor) *DNSBLResponseQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultDNSBLResponseOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *dNSBLResponsePager) applyOrder(query *DNSBLResponseQuery, reverse bool) *DNSBLResponseQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultDNSBLResponseOrder.Field {
		query = query.Order(Asc(DefaultDNSBLResponseOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to DNSBLResponse.
func (dr *DNSBLResponseQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...DNSBLResponsePaginateOption,
) (*DNSBLResponseConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newDNSBLResponsePager(opts)
	if err != nil {
		return nil, err
	}

	if dr, err = pager.applyFilter(dr); err != nil {
		return nil, err
	}

	conn := &DNSBLResponseConnection{Edges: []*DNSBLResponseEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := dr.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := dr.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	dr = pager.applyCursors(dr, after, before)
	dr = pager.applyOrder(dr, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		dr = dr.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		dr = dr.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := dr.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *DNSBLResponse
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *DNSBLResponse {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *DNSBLResponse {
			return nodes[i]
		}
	}

	conn.Edges = make([]*DNSBLResponseEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &DNSBLResponseEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// DNSBLResponseOrderField defines the ordering field of DNSBLResponse.
type DNSBLResponseOrderField struct {
	field    string
	toCursor func(*DNSBLResponse) Cursor
}

// DNSBLResponseOrder defines the ordering of DNSBLResponse.
type DNSBLResponseOrder struct {
	Direction OrderDirection           `json:"direction"`
	Field     *DNSBLResponseOrderField `json:"field"`
}

// DefaultDNSBLResponseOrder is the default ordering of DNSBLResponse.
var DefaultDNSBLResponseOrder = &DNSBLResponseOrder{
	Direction: OrderDirectionAsc,
	Field: &DNSBLResponseOrderField{
		field: dnsblresponse.FieldID,
		toCursor: func(dr *DNSBLResponse) Cursor {
			return Cursor{ID: dr.ID}
		},
	},
}

// IPEdge is the edge representation of IP.
type IPEdge struct {
	Node   *IP    `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// IPConnection is the connection containing edges to IP.
type IPConnection struct {
	Edges      []*IPEdge `json:"edges"`
	PageInfo   PageInfo  `json:"pageInfo"`
	TotalCount int       `json:"totalCount"`
}

// IPPaginateOption enables pagination customization.
type IPPaginateOption func(*iPPager) error

// WithIPOrder configures pagination ordering.
func WithIPOrder(order *IPOrder) IPPaginateOption {
	if order == nil {
		order = DefaultIPOrder
	}
	o := *order
	return func(pager *iPPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultIPOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithIPFilter configures pagination filter.
func WithIPFilter(filter func(*IPQuery) (*IPQuery, error)) IPPaginateOption {
	return func(pager *iPPager) error {
		if filter == nil {
			return errors.New("IPQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type iPPager struct {
	order  *IPOrder
	filter func(*IPQuery) (*IPQuery, error)
}

func newIPPager(opts []IPPaginateOption) (*iPPager, error) {
	pager := &iPPager{}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultIPOrder
	}
	return pager, nil
}

func (p *iPPager) applyFilter(query *IPQuery) (*IPQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *iPPager) toCursor(i *IP) Cursor {
	return p.order.Field.toCursor(i)
}

func (p *iPPager) applyCursors(query *IPQuery, after, before *Cursor) *IPQuery {
	for _, predicate := range cursorsToPredicates(
		p.order.Direction, after, before,
		p.order.Field.field, DefaultIPOrder.Field.field,
	) {
		query = query.Where(predicate)
	}
	return query
}

func (p *iPPager) applyOrder(query *IPQuery, reverse bool) *IPQuery {
	direction := p.order.Direction
	if reverse {
		direction = direction.reverse()
	}
	query = query.Order(direction.orderFunc(p.order.Field.field))
	if p.order.Field != DefaultIPOrder.Field {
		query = query.Order(Asc(DefaultIPOrder.Field.field))
	}
	return query
}

// Paginate executes the query and returns a relay based cursor connection to IP.
func (i *IPQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...IPPaginateOption,
) (*IPConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newIPPager(opts)
	if err != nil {
		return nil, err
	}

	if i, err = pager.applyFilter(i); err != nil {
		return nil, err
	}

	conn := &IPConnection{Edges: []*IPEdge{}}
	if !hasCollectedField(ctx, edgesField) ||
		first != nil && *first == 0 ||
		last != nil && *last == 0 {
		if hasCollectedField(ctx, totalCountField) ||
			hasCollectedField(ctx, pageInfoField) {
			count, err := i.Count(ctx)
			if err != nil {
				return nil, err
			}
			conn.TotalCount = count
			conn.PageInfo.HasNextPage = first != nil && count > 0
			conn.PageInfo.HasPreviousPage = last != nil && count > 0
		}
		return conn, nil
	}

	if (after != nil || first != nil || before != nil || last != nil) &&
		hasCollectedField(ctx, totalCountField) {
		count, err := i.Clone().Count(ctx)
		if err != nil {
			return nil, err
		}
		conn.TotalCount = count
	}

	i = pager.applyCursors(i, after, before)
	i = pager.applyOrder(i, last != nil)
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	if limit > 0 {
		i = i.Limit(limit)
	}

	if field := getCollectedField(ctx, edgesField, nodeField); field != nil {
		i = i.collectField(graphql.GetOperationContext(ctx), *field)
	}

	nodes, err := i.All(ctx)
	if err != nil || len(nodes) == 0 {
		return conn, err
	}

	if len(nodes) == limit {
		conn.PageInfo.HasNextPage = first != nil
		conn.PageInfo.HasPreviousPage = last != nil
		nodes = nodes[:len(nodes)-1]
	}

	var nodeAt func(int) *IP
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *IP {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *IP {
			return nodes[i]
		}
	}

	conn.Edges = make([]*IPEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		conn.Edges[i] = &IPEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}

	conn.PageInfo.StartCursor = &conn.Edges[0].Cursor
	conn.PageInfo.EndCursor = &conn.Edges[len(conn.Edges)-1].Cursor
	if conn.TotalCount == 0 {
		conn.TotalCount = len(nodes)
	}

	return conn, nil
}

// IPOrderField defines the ordering field of IP.
type IPOrderField struct {
	field    string
	toCursor func(*IP) Cursor
}

// IPOrder defines the ordering of IP.
type IPOrder struct {
	Direction OrderDirection `json:"direction"`
	Field     *IPOrderField  `json:"field"`
}

// DefaultIPOrder is the default ordering of IP.
var DefaultIPOrder = &IPOrder{
	Direction: OrderDirectionAsc,
	Field: &IPOrderField{
		field: ip.FieldID,
		toCursor: func(i *IP) Cursor {
			return Cursor{ID: i.ID}
		},
	},
}
