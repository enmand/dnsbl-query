// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/enmand/dnsbl-query/internel/ent/gen/ent/dnsblquery"
	"github.com/enmand/dnsbl-query/internel/ent/gen/ent/ip"
	"github.com/facebook/ent/dialect/sql"
)

// DNSBLQuery is the model entity for the DNSBLQuery schema.
type DNSBLQuery struct {
	config
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DNSBLQueryQuery when eager-loading is set.
	Edges      DNSBLQueryEdges `json:"edges"`
	ip_queries *string
}

// DNSBLQueryEdges holds the relations/edges for other nodes in the graph.
type DNSBLQueryEdges struct {
	// Responses holds the value of the responses edge.
	Responses []*DNSBLResponse
	// IPAddress holds the value of the ip_address edge.
	IPAddress *IP
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ResponsesOrErr returns the Responses value or an error if the edge
// was not loaded in eager-loading.
func (e DNSBLQueryEdges) ResponsesOrErr() ([]*DNSBLResponse, error) {
	if e.loadedTypes[0] {
		return e.Responses, nil
	}
	return nil, &NotLoadedError{edge: "responses"}
}

// IPAddressOrErr returns the IPAddress value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DNSBLQueryEdges) IPAddressOrErr() (*IP, error) {
	if e.loadedTypes[1] {
		if e.IPAddress == nil {
			// The edge ip_address was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ip.Label}
		}
		return e.IPAddress, nil
	}
	return nil, &NotLoadedError{edge: "ip_address"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSBLQuery) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DNSBLQuery) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // ip_queries
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSBLQuery fields.
func (dq *DNSBLQuery) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dnsblquery.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	dq.ID = string(value.Int64)
	values = values[1:]
	if len(values) == len(dnsblquery.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ip_queries", value)
		} else if value.Valid {
			dq.ip_queries = new(string)
			*dq.ip_queries = string(value.Int64)
		}
	}
	return nil
}

// QueryResponses queries the responses edge of the DNSBLQuery.
func (dq *DNSBLQuery) QueryResponses() *DNSBLResponseQuery {
	return (&DNSBLQueryClient{config: dq.config}).QueryResponses(dq)
}

// QueryIPAddress queries the ip_address edge of the DNSBLQuery.
func (dq *DNSBLQuery) QueryIPAddress() *IPQuery {
	return (&DNSBLQueryClient{config: dq.config}).QueryIPAddress(dq)
}

// Update returns a builder for updating this DNSBLQuery.
// Note that, you need to call DNSBLQuery.Unwrap() before calling this method, if this DNSBLQuery
// was returned from a transaction, and the transaction was committed or rolled back.
func (dq *DNSBLQuery) Update() *DNSBLQueryUpdateOne {
	return (&DNSBLQueryClient{config: dq.config}).UpdateOne(dq)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (dq *DNSBLQuery) Unwrap() *DNSBLQuery {
	tx, ok := dq.config.driver.(*txDriver)
	if !ok {
		panic("ent: DNSBLQuery is not a transactional entity")
	}
	dq.config.driver = tx.drv
	return dq
}

// String implements the fmt.Stringer.
func (dq *DNSBLQuery) String() string {
	var builder strings.Builder
	builder.WriteString("DNSBLQuery(")
	builder.WriteString(fmt.Sprintf("id=%v", dq.ID))
	builder.WriteByte(')')
	return builder.String()
}

// DNSBLQueries is a parsable slice of DNSBLQuery.
type DNSBLQueries []*DNSBLQuery

func (dq DNSBLQueries) config(cfg config) {
	for _i := range dq {
		dq[_i].config = cfg
	}
}
