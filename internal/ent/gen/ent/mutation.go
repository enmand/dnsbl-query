// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblquery"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblresponse"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/ip"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/predicate"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/user"
	"github.com/google/uuid"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeDNSBLQuery    = "DNSBLQuery"
	TypeDNSBLResponse = "DNSBLResponse"
	TypeIP            = "IP"
	TypeUser          = "User"
)

// DNSBLQueryMutation represents an operation that mutate the DNSBLQueries
// nodes in the graph.
type DNSBLQueryMutation struct {
	config
	op                Op
	typ               string
	id                *uuid.UUID
	created_at        *time.Time
	updated_at        *time.Time
	clearedFields     map[string]struct{}
	responses         map[uuid.UUID]struct{}
	removedresponses  map[uuid.UUID]struct{}
	clearedresponses  bool
	ip_address        *uuid.UUID
	clearedip_address bool
	done              bool
	oldValue          func(context.Context) (*DNSBLQuery, error)
	predicates        []predicate.DNSBLQuery
}

var _ ent.Mutation = (*DNSBLQueryMutation)(nil)

// dnsblqueryOption allows to manage the mutation configuration using functional options.
type dnsblqueryOption func(*DNSBLQueryMutation)

// newDNSBLQueryMutation creates new mutation for $n.Name.
func newDNSBLQueryMutation(c config, op Op, opts ...dnsblqueryOption) *DNSBLQueryMutation {
	m := &DNSBLQueryMutation{
		config:        c,
		op:            op,
		typ:           TypeDNSBLQuery,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDNSBLQueryID sets the id field of the mutation.
func withDNSBLQueryID(id uuid.UUID) dnsblqueryOption {
	return func(m *DNSBLQueryMutation) {
		var (
			err   error
			once  sync.Once
			value *DNSBLQuery
		)
		m.oldValue = func(ctx context.Context) (*DNSBLQuery, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DNSBLQuery.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDNSBLQuery sets the old DNSBLQuery of the mutation.
func withDNSBLQuery(node *DNSBLQuery) dnsblqueryOption {
	return func(m *DNSBLQueryMutation) {
		m.oldValue = func(context.Context) (*DNSBLQuery, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DNSBLQueryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DNSBLQueryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on DNSBLQuery creation.
func (m *DNSBLQueryMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DNSBLQueryMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *DNSBLQueryMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *DNSBLQueryMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the DNSBLQuery.
// If the DNSBLQuery object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DNSBLQueryMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *DNSBLQueryMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *DNSBLQueryMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *DNSBLQueryMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the DNSBLQuery.
// If the DNSBLQuery object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DNSBLQueryMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *DNSBLQueryMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddResponseIDs adds the responses edge to DNSBLResponse by ids.
func (m *DNSBLQueryMutation) AddResponseIDs(ids ...uuid.UUID) {
	if m.responses == nil {
		m.responses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the responses edge to DNSBLResponse.
func (m *DNSBLQueryMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared returns if the edge responses was cleared.
func (m *DNSBLQueryMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the responses edge to DNSBLResponse by ids.
func (m *DNSBLQueryMutation) RemoveResponseIDs(ids ...uuid.UUID) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed ids of responses.
func (m *DNSBLQueryMutation) RemovedResponsesIDs() (ids []uuid.UUID) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the responses ids in the mutation.
func (m *DNSBLQueryMutation) ResponsesIDs() (ids []uuid.UUID) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses reset all changes of the "responses" edge.
func (m *DNSBLQueryMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// SetIPAddressID sets the ip_address edge to IP by id.
func (m *DNSBLQueryMutation) SetIPAddressID(id uuid.UUID) {
	m.ip_address = &id
}

// ClearIPAddress clears the ip_address edge to IP.
func (m *DNSBLQueryMutation) ClearIPAddress() {
	m.clearedip_address = true
}

// IPAddressCleared returns if the edge ip_address was cleared.
func (m *DNSBLQueryMutation) IPAddressCleared() bool {
	return m.clearedip_address
}

// IPAddressID returns the ip_address id in the mutation.
func (m *DNSBLQueryMutation) IPAddressID() (id uuid.UUID, exists bool) {
	if m.ip_address != nil {
		return *m.ip_address, true
	}
	return
}

// IPAddressIDs returns the ip_address ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// IPAddressID instead. It exists only for internal usage by the builders.
func (m *DNSBLQueryMutation) IPAddressIDs() (ids []uuid.UUID) {
	if id := m.ip_address; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetIPAddress reset all changes of the "ip_address" edge.
func (m *DNSBLQueryMutation) ResetIPAddress() {
	m.ip_address = nil
	m.clearedip_address = false
}

// Op returns the operation name.
func (m *DNSBLQueryMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DNSBLQuery).
func (m *DNSBLQueryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DNSBLQueryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, dnsblquery.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dnsblquery.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DNSBLQueryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dnsblquery.FieldCreatedAt:
		return m.CreatedAt()
	case dnsblquery.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DNSBLQueryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dnsblquery.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dnsblquery.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown DNSBLQuery field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DNSBLQueryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dnsblquery.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dnsblquery.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown DNSBLQuery field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DNSBLQueryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DNSBLQueryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DNSBLQueryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DNSBLQuery numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DNSBLQueryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DNSBLQueryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DNSBLQueryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DNSBLQuery nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DNSBLQueryMutation) ResetField(name string) error {
	switch name {
	case dnsblquery.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dnsblquery.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown DNSBLQuery field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DNSBLQueryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.responses != nil {
		edges = append(edges, dnsblquery.EdgeResponses)
	}
	if m.ip_address != nil {
		edges = append(edges, dnsblquery.EdgeIPAddress)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DNSBLQueryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dnsblquery.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	case dnsblquery.EdgeIPAddress:
		if id := m.ip_address; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DNSBLQueryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedresponses != nil {
		edges = append(edges, dnsblquery.EdgeResponses)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DNSBLQueryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case dnsblquery.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DNSBLQueryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedresponses {
		edges = append(edges, dnsblquery.EdgeResponses)
	}
	if m.clearedip_address {
		edges = append(edges, dnsblquery.EdgeIPAddress)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DNSBLQueryMutation) EdgeCleared(name string) bool {
	switch name {
	case dnsblquery.EdgeResponses:
		return m.clearedresponses
	case dnsblquery.EdgeIPAddress:
		return m.clearedip_address
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DNSBLQueryMutation) ClearEdge(name string) error {
	switch name {
	case dnsblquery.EdgeIPAddress:
		m.ClearIPAddress()
		return nil
	}
	return fmt.Errorf("unknown DNSBLQuery unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DNSBLQueryMutation) ResetEdge(name string) error {
	switch name {
	case dnsblquery.EdgeResponses:
		m.ResetResponses()
		return nil
	case dnsblquery.EdgeIPAddress:
		m.ResetIPAddress()
		return nil
	}
	return fmt.Errorf("unknown DNSBLQuery edge %s", name)
}

// DNSBLResponseMutation represents an operation that mutate the DNSBLResponses
// nodes in the graph.
type DNSBLResponseMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	code          *string
	description   *string
	clearedFields map[string]struct{}
	query         *uuid.UUID
	clearedquery  bool
	done          bool
	oldValue      func(context.Context) (*DNSBLResponse, error)
	predicates    []predicate.DNSBLResponse
}

var _ ent.Mutation = (*DNSBLResponseMutation)(nil)

// dnsblresponseOption allows to manage the mutation configuration using functional options.
type dnsblresponseOption func(*DNSBLResponseMutation)

// newDNSBLResponseMutation creates new mutation for $n.Name.
func newDNSBLResponseMutation(c config, op Op, opts ...dnsblresponseOption) *DNSBLResponseMutation {
	m := &DNSBLResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeDNSBLResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDNSBLResponseID sets the id field of the mutation.
func withDNSBLResponseID(id uuid.UUID) dnsblresponseOption {
	return func(m *DNSBLResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *DNSBLResponse
		)
		m.oldValue = func(ctx context.Context) (*DNSBLResponse, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().DNSBLResponse.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDNSBLResponse sets the old DNSBLResponse of the mutation.
func withDNSBLResponse(node *DNSBLResponse) dnsblresponseOption {
	return func(m *DNSBLResponseMutation) {
		m.oldValue = func(context.Context) (*DNSBLResponse, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DNSBLResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DNSBLResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on DNSBLResponse creation.
func (m *DNSBLResponseMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *DNSBLResponseMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *DNSBLResponseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *DNSBLResponseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the DNSBLResponse.
// If the DNSBLResponse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DNSBLResponseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *DNSBLResponseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *DNSBLResponseMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *DNSBLResponseMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the DNSBLResponse.
// If the DNSBLResponse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DNSBLResponseMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *DNSBLResponseMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCode sets the code field.
func (m *DNSBLResponseMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the code value in the mutation.
func (m *DNSBLResponseMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old code value of the DNSBLResponse.
// If the DNSBLResponse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DNSBLResponseMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode reset all changes of the "code" field.
func (m *DNSBLResponseMutation) ResetCode() {
	m.code = nil
}

// SetDescription sets the description field.
func (m *DNSBLResponseMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the description value in the mutation.
func (m *DNSBLResponseMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old description value of the DNSBLResponse.
// If the DNSBLResponse object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *DNSBLResponseMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription reset all changes of the "description" field.
func (m *DNSBLResponseMutation) ResetDescription() {
	m.description = nil
}

// SetQueryID sets the query edge to DNSBLQuery by id.
func (m *DNSBLResponseMutation) SetQueryID(id uuid.UUID) {
	m.query = &id
}

// ClearQuery clears the query edge to DNSBLQuery.
func (m *DNSBLResponseMutation) ClearQuery() {
	m.clearedquery = true
}

// QueryCleared returns if the edge query was cleared.
func (m *DNSBLResponseMutation) QueryCleared() bool {
	return m.clearedquery
}

// QueryID returns the query id in the mutation.
func (m *DNSBLResponseMutation) QueryID() (id uuid.UUID, exists bool) {
	if m.query != nil {
		return *m.query, true
	}
	return
}

// QueryIDs returns the query ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// QueryID instead. It exists only for internal usage by the builders.
func (m *DNSBLResponseMutation) QueryIDs() (ids []uuid.UUID) {
	if id := m.query; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuery reset all changes of the "query" edge.
func (m *DNSBLResponseMutation) ResetQuery() {
	m.query = nil
	m.clearedquery = false
}

// Op returns the operation name.
func (m *DNSBLResponseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (DNSBLResponse).
func (m *DNSBLResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *DNSBLResponseMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, dnsblresponse.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, dnsblresponse.FieldUpdatedAt)
	}
	if m.code != nil {
		fields = append(fields, dnsblresponse.FieldCode)
	}
	if m.description != nil {
		fields = append(fields, dnsblresponse.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *DNSBLResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case dnsblresponse.FieldCreatedAt:
		return m.CreatedAt()
	case dnsblresponse.FieldUpdatedAt:
		return m.UpdatedAt()
	case dnsblresponse.FieldCode:
		return m.Code()
	case dnsblresponse.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *DNSBLResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case dnsblresponse.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case dnsblresponse.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case dnsblresponse.FieldCode:
		return m.OldCode(ctx)
	case dnsblresponse.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown DNSBLResponse field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DNSBLResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case dnsblresponse.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case dnsblresponse.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case dnsblresponse.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case dnsblresponse.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown DNSBLResponse field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *DNSBLResponseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *DNSBLResponseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *DNSBLResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown DNSBLResponse numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *DNSBLResponseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *DNSBLResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *DNSBLResponseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown DNSBLResponse nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *DNSBLResponseMutation) ResetField(name string) error {
	switch name {
	case dnsblresponse.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case dnsblresponse.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case dnsblresponse.FieldCode:
		m.ResetCode()
		return nil
	case dnsblresponse.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown DNSBLResponse field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *DNSBLResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.query != nil {
		edges = append(edges, dnsblresponse.EdgeQuery)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *DNSBLResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case dnsblresponse.EdgeQuery:
		if id := m.query; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *DNSBLResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *DNSBLResponseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *DNSBLResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedquery {
		edges = append(edges, dnsblresponse.EdgeQuery)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *DNSBLResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case dnsblresponse.EdgeQuery:
		return m.clearedquery
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *DNSBLResponseMutation) ClearEdge(name string) error {
	switch name {
	case dnsblresponse.EdgeQuery:
		m.ClearQuery()
		return nil
	}
	return fmt.Errorf("unknown DNSBLResponse unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *DNSBLResponseMutation) ResetEdge(name string) error {
	switch name {
	case dnsblresponse.EdgeQuery:
		m.ResetQuery()
		return nil
	}
	return fmt.Errorf("unknown DNSBLResponse edge %s", name)
}

// IPMutation represents an operation that mutate the IPs
// nodes in the graph.
type IPMutation struct {
	config
	op             Op
	typ            string
	id             *uuid.UUID
	created_at     *time.Time
	updated_at     *time.Time
	ip_address     *string
	clearedFields  map[string]struct{}
	queries        map[uuid.UUID]struct{}
	removedqueries map[uuid.UUID]struct{}
	clearedqueries bool
	done           bool
	oldValue       func(context.Context) (*IP, error)
	predicates     []predicate.IP
}

var _ ent.Mutation = (*IPMutation)(nil)

// ipOption allows to manage the mutation configuration using functional options.
type ipOption func(*IPMutation)

// newIPMutation creates new mutation for $n.Name.
func newIPMutation(c config, op Op, opts ...ipOption) *IPMutation {
	m := &IPMutation{
		config:        c,
		op:            op,
		typ:           TypeIP,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIPID sets the id field of the mutation.
func withIPID(id uuid.UUID) ipOption {
	return func(m *IPMutation) {
		var (
			err   error
			once  sync.Once
			value *IP
		)
		m.oldValue = func(ctx context.Context) (*IP, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().IP.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIP sets the old IP of the mutation.
func withIP(node *IP) ipOption {
	return func(m *IPMutation) {
		m.oldValue = func(context.Context) (*IP, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IPMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IPMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on IP creation.
func (m *IPMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *IPMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *IPMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *IPMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the IP.
// If the IP object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *IPMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *IPMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *IPMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *IPMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the IP.
// If the IP object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *IPMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *IPMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIPAddress sets the ip_address field.
func (m *IPMutation) SetIPAddress(s string) {
	m.ip_address = &s
}

// IPAddress returns the ip_address value in the mutation.
func (m *IPMutation) IPAddress() (r string, exists bool) {
	v := m.ip_address
	if v == nil {
		return
	}
	return *v, true
}

// OldIPAddress returns the old ip_address value of the IP.
// If the IP object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *IPMutation) OldIPAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIPAddress is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIPAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIPAddress: %w", err)
	}
	return oldValue.IPAddress, nil
}

// ResetIPAddress reset all changes of the "ip_address" field.
func (m *IPMutation) ResetIPAddress() {
	m.ip_address = nil
}

// AddQueryIDs adds the queries edge to DNSBLQuery by ids.
func (m *IPMutation) AddQueryIDs(ids ...uuid.UUID) {
	if m.queries == nil {
		m.queries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.queries[ids[i]] = struct{}{}
	}
}

// ClearQueries clears the queries edge to DNSBLQuery.
func (m *IPMutation) ClearQueries() {
	m.clearedqueries = true
}

// QueriesCleared returns if the edge queries was cleared.
func (m *IPMutation) QueriesCleared() bool {
	return m.clearedqueries
}

// RemoveQueryIDs removes the queries edge to DNSBLQuery by ids.
func (m *IPMutation) RemoveQueryIDs(ids ...uuid.UUID) {
	if m.removedqueries == nil {
		m.removedqueries = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedqueries[ids[i]] = struct{}{}
	}
}

// RemovedQueries returns the removed ids of queries.
func (m *IPMutation) RemovedQueriesIDs() (ids []uuid.UUID) {
	for id := range m.removedqueries {
		ids = append(ids, id)
	}
	return
}

// QueriesIDs returns the queries ids in the mutation.
func (m *IPMutation) QueriesIDs() (ids []uuid.UUID) {
	for id := range m.queries {
		ids = append(ids, id)
	}
	return
}

// ResetQueries reset all changes of the "queries" edge.
func (m *IPMutation) ResetQueries() {
	m.queries = nil
	m.clearedqueries = false
	m.removedqueries = nil
}

// Op returns the operation name.
func (m *IPMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (IP).
func (m *IPMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *IPMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, ip.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ip.FieldUpdatedAt)
	}
	if m.ip_address != nil {
		fields = append(fields, ip.FieldIPAddress)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *IPMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ip.FieldCreatedAt:
		return m.CreatedAt()
	case ip.FieldUpdatedAt:
		return m.UpdatedAt()
	case ip.FieldIPAddress:
		return m.IPAddress()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *IPMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ip.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ip.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case ip.FieldIPAddress:
		return m.OldIPAddress(ctx)
	}
	return nil, fmt.Errorf("unknown IP field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *IPMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ip.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ip.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case ip.FieldIPAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIPAddress(v)
		return nil
	}
	return fmt.Errorf("unknown IP field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *IPMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *IPMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *IPMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown IP numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *IPMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *IPMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *IPMutation) ClearField(name string) error {
	return fmt.Errorf("unknown IP nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *IPMutation) ResetField(name string) error {
	switch name {
	case ip.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ip.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case ip.FieldIPAddress:
		m.ResetIPAddress()
		return nil
	}
	return fmt.Errorf("unknown IP field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *IPMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.queries != nil {
		edges = append(edges, ip.EdgeQueries)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *IPMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ip.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.queries))
		for id := range m.queries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *IPMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedqueries != nil {
		edges = append(edges, ip.EdgeQueries)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *IPMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ip.EdgeQueries:
		ids := make([]ent.Value, 0, len(m.removedqueries))
		for id := range m.removedqueries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *IPMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedqueries {
		edges = append(edges, ip.EdgeQueries)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *IPMutation) EdgeCleared(name string) bool {
	switch name {
	case ip.EdgeQueries:
		return m.clearedqueries
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *IPMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown IP unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *IPMutation) ResetEdge(name string) error {
	switch name {
	case ip.EdgeQueries:
		m.ResetQueries()
		return nil
	}
	return fmt.Errorf("unknown IP edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	updated_at    *time.Time
	username      *string
	password      *[]byte
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on User creation.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old updated_at value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt reset all changes of the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUsername sets the username field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the username value in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old username value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername reset all changes of the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(b []byte) {
	m.password = &b
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r []byte, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
