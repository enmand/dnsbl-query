// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/enmand/dnsbl-query/internel/ent/gen/ent/dnsblquery"
	"github.com/enmand/dnsbl-query/internel/ent/gen/ent/dnsblresponse"
	"github.com/enmand/dnsbl-query/internel/ent/gen/ent/ip"
	"github.com/enmand/dnsbl-query/internel/ent/gen/ent/predicate"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
)

// DNSBLQueryQuery is the builder for querying DNSBLQuery entities.
type DNSBLQueryQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.DNSBLQuery
	// eager-loading edges.
	withResponses *DNSBLResponseQuery
	withIPAddress *IPQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (dqq *DNSBLQueryQuery) Where(ps ...predicate.DNSBLQuery) *DNSBLQueryQuery {
	dqq.predicates = append(dqq.predicates, ps...)
	return dqq
}

// Limit adds a limit step to the query.
func (dqq *DNSBLQueryQuery) Limit(limit int) *DNSBLQueryQuery {
	dqq.limit = &limit
	return dqq
}

// Offset adds an offset step to the query.
func (dqq *DNSBLQueryQuery) Offset(offset int) *DNSBLQueryQuery {
	dqq.offset = &offset
	return dqq
}

// Order adds an order step to the query.
func (dqq *DNSBLQueryQuery) Order(o ...OrderFunc) *DNSBLQueryQuery {
	dqq.order = append(dqq.order, o...)
	return dqq
}

// QueryResponses chains the current query on the responses edge.
func (dqq *DNSBLQueryQuery) QueryResponses() *DNSBLResponseQuery {
	query := &DNSBLResponseQuery{config: dqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dqq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dnsblquery.Table, dnsblquery.FieldID, selector),
			sqlgraph.To(dnsblresponse.Table, dnsblresponse.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, dnsblquery.ResponsesTable, dnsblquery.ResponsesColumn),
		)
		fromU = sqlgraph.SetNeighbors(dqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIPAddress chains the current query on the ip_address edge.
func (dqq *DNSBLQueryQuery) QueryIPAddress() *IPQuery {
	query := &IPQuery{config: dqq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := dqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := dqq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(dnsblquery.Table, dnsblquery.FieldID, selector),
			sqlgraph.To(ip.Table, ip.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, dnsblquery.IPAddressTable, dnsblquery.IPAddressColumn),
		)
		fromU = sqlgraph.SetNeighbors(dqq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first DNSBLQuery entity in the query. Returns *NotFoundError when no dnsblquery was found.
func (dqq *DNSBLQueryQuery) First(ctx context.Context) (*DNSBLQuery, error) {
	nodes, err := dqq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{dnsblquery.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) FirstX(ctx context.Context) *DNSBLQuery {
	node, err := dqq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first DNSBLQuery id in the query. Returns *NotFoundError when no id was found.
func (dqq *DNSBLQueryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dqq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{dnsblquery.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) FirstIDX(ctx context.Context) string {
	id, err := dqq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only DNSBLQuery entity in the query, returns an error if not exactly one entity was returned.
func (dqq *DNSBLQueryQuery) Only(ctx context.Context) (*DNSBLQuery, error) {
	nodes, err := dqq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{dnsblquery.Label}
	default:
		return nil, &NotSingularError{dnsblquery.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) OnlyX(ctx context.Context) *DNSBLQuery {
	node, err := dqq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID returns the only DNSBLQuery id in the query, returns an error if not exactly one id was returned.
func (dqq *DNSBLQueryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = dqq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = &NotSingularError{dnsblquery.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) OnlyIDX(ctx context.Context) string {
	id, err := dqq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of DNSBLQueries.
func (dqq *DNSBLQueryQuery) All(ctx context.Context) ([]*DNSBLQuery, error) {
	if err := dqq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return dqq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) AllX(ctx context.Context) []*DNSBLQuery {
	nodes, err := dqq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of DNSBLQuery ids.
func (dqq *DNSBLQueryQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := dqq.Select(dnsblquery.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) IDsX(ctx context.Context) []string {
	ids, err := dqq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (dqq *DNSBLQueryQuery) Count(ctx context.Context) (int, error) {
	if err := dqq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return dqq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) CountX(ctx context.Context) int {
	count, err := dqq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (dqq *DNSBLQueryQuery) Exist(ctx context.Context) (bool, error) {
	if err := dqq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return dqq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (dqq *DNSBLQueryQuery) ExistX(ctx context.Context) bool {
	exist, err := dqq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (dqq *DNSBLQueryQuery) Clone() *DNSBLQueryQuery {
	return &DNSBLQueryQuery{
		config:     dqq.config,
		limit:      dqq.limit,
		offset:     dqq.offset,
		order:      append([]OrderFunc{}, dqq.order...),
		unique:     append([]string{}, dqq.unique...),
		predicates: append([]predicate.DNSBLQuery{}, dqq.predicates...),
		// clone intermediate query.
		sql:  dqq.sql.Clone(),
		path: dqq.path,
	}
}

//  WithResponses tells the query-builder to eager-loads the nodes that are connected to
// the "responses" edge. The optional arguments used to configure the query builder of the edge.
func (dqq *DNSBLQueryQuery) WithResponses(opts ...func(*DNSBLResponseQuery)) *DNSBLQueryQuery {
	query := &DNSBLResponseQuery{config: dqq.config}
	for _, opt := range opts {
		opt(query)
	}
	dqq.withResponses = query
	return dqq
}

//  WithIPAddress tells the query-builder to eager-loads the nodes that are connected to
// the "ip_address" edge. The optional arguments used to configure the query builder of the edge.
func (dqq *DNSBLQueryQuery) WithIPAddress(opts ...func(*IPQuery)) *DNSBLQueryQuery {
	query := &IPQuery{config: dqq.config}
	for _, opt := range opts {
		opt(query)
	}
	dqq.withIPAddress = query
	return dqq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (dqq *DNSBLQueryQuery) GroupBy(field string, fields ...string) *DNSBLQueryGroupBy {
	group := &DNSBLQueryGroupBy{config: dqq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dqq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
func (dqq *DNSBLQueryQuery) Select(field string, fields ...string) *DNSBLQuerySelect {
	selector := &DNSBLQuerySelect{config: dqq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := dqq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return dqq.sqlQuery(), nil
	}
	return selector
}

func (dqq *DNSBLQueryQuery) prepareQuery(ctx context.Context) error {
	if dqq.path != nil {
		prev, err := dqq.path(ctx)
		if err != nil {
			return err
		}
		dqq.sql = prev
	}
	return nil
}

func (dqq *DNSBLQueryQuery) sqlAll(ctx context.Context) ([]*DNSBLQuery, error) {
	var (
		nodes       = []*DNSBLQuery{}
		withFKs     = dqq.withFKs
		_spec       = dqq.querySpec()
		loadedTypes = [2]bool{
			dqq.withResponses != nil,
			dqq.withIPAddress != nil,
		}
	)
	if dqq.withIPAddress != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, dnsblquery.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &DNSBLQuery{config: dqq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, dqq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := dqq.withResponses; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*DNSBLQuery)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Responses = []*DNSBLResponse{}
		}
		query.withFKs = true
		query.Where(predicate.DNSBLResponse(func(s *sql.Selector) {
			s.Where(sql.InValues(dnsblquery.ResponsesColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.dnsbl_query_responses
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "dnsbl_query_responses" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "dnsbl_query_responses" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Responses = append(node.Edges.Responses, n)
		}
	}

	if query := dqq.withIPAddress; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*DNSBLQuery)
		for i := range nodes {
			if fk := nodes[i].ip_queries; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(ip.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "ip_queries" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.IPAddress = n
			}
		}
	}

	return nodes, nil
}

func (dqq *DNSBLQueryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := dqq.querySpec()
	return sqlgraph.CountNodes(ctx, dqq.driver, _spec)
}

func (dqq *DNSBLQueryQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := dqq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (dqq *DNSBLQueryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   dnsblquery.Table,
			Columns: dnsblquery.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: dnsblquery.FieldID,
			},
		},
		From:   dqq.sql,
		Unique: true,
	}
	if ps := dqq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := dqq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := dqq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := dqq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, dnsblquery.ValidColumn)
			}
		}
	}
	return _spec
}

func (dqq *DNSBLQueryQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(dqq.driver.Dialect())
	t1 := builder.Table(dnsblquery.Table)
	selector := builder.Select(t1.Columns(dnsblquery.Columns...)...).From(t1)
	if dqq.sql != nil {
		selector = dqq.sql
		selector.Select(selector.Columns(dnsblquery.Columns...)...)
	}
	for _, p := range dqq.predicates {
		p(selector)
	}
	for _, p := range dqq.order {
		p(selector, dnsblquery.ValidColumn)
	}
	if offset := dqq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := dqq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// DNSBLQueryGroupBy is the builder for group-by DNSBLQuery entities.
type DNSBLQueryGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (dqgb *DNSBLQueryGroupBy) Aggregate(fns ...AggregateFunc) *DNSBLQueryGroupBy {
	dqgb.fns = append(dqgb.fns, fns...)
	return dqgb
}

// Scan applies the group-by query and scan the result into the given value.
func (dqgb *DNSBLQueryGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := dqgb.path(ctx)
	if err != nil {
		return err
	}
	dqgb.sql = query
	return dqgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := dqgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(dqgb.fields) > 1 {
		return nil, errors.New("ent: DNSBLQueryGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := dqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) StringsX(ctx context.Context) []string {
	v, err := dqgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dqgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQueryGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) StringX(ctx context.Context) string {
	v, err := dqgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(dqgb.fields) > 1 {
		return nil, errors.New("ent: DNSBLQueryGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := dqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) IntsX(ctx context.Context) []int {
	v, err := dqgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dqgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQueryGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) IntX(ctx context.Context) int {
	v, err := dqgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(dqgb.fields) > 1 {
		return nil, errors.New("ent: DNSBLQueryGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := dqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := dqgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dqgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQueryGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) Float64X(ctx context.Context) float64 {
	v, err := dqgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(dqgb.fields) > 1 {
		return nil, errors.New("ent: DNSBLQueryGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := dqgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := dqgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (dqgb *DNSBLQueryGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dqgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQueryGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dqgb *DNSBLQueryGroupBy) BoolX(ctx context.Context) bool {
	v, err := dqgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dqgb *DNSBLQueryGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dqgb.fields {
		if !dnsblquery.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := dqgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := dqgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dqgb *DNSBLQueryGroupBy) sqlQuery() *sql.Selector {
	selector := dqgb.sql
	columns := make([]string, 0, len(dqgb.fields)+len(dqgb.fns))
	columns = append(columns, dqgb.fields...)
	for _, fn := range dqgb.fns {
		columns = append(columns, fn(selector, dnsblquery.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(dqgb.fields...)
}

// DNSBLQuerySelect is the builder for select fields of DNSBLQuery entities.
type DNSBLQuerySelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (dqs *DNSBLQuerySelect) Scan(ctx context.Context, v interface{}) error {
	query, err := dqs.path(ctx)
	if err != nil {
		return err
	}
	dqs.sql = query
	return dqs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) ScanX(ctx context.Context, v interface{}) {
	if err := dqs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) Strings(ctx context.Context) ([]string, error) {
	if len(dqs.fields) > 1 {
		return nil, errors.New("ent: DNSBLQuerySelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := dqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) StringsX(ctx context.Context) []string {
	v, err := dqs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = dqs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQuerySelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) StringX(ctx context.Context) string {
	v, err := dqs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) Ints(ctx context.Context) ([]int, error) {
	if len(dqs.fields) > 1 {
		return nil, errors.New("ent: DNSBLQuerySelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := dqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) IntsX(ctx context.Context) []int {
	v, err := dqs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = dqs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQuerySelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) IntX(ctx context.Context) int {
	v, err := dqs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(dqs.fields) > 1 {
		return nil, errors.New("ent: DNSBLQuerySelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := dqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) Float64sX(ctx context.Context) []float64 {
	v, err := dqs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = dqs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQuerySelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) Float64X(ctx context.Context) float64 {
	v, err := dqs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) Bools(ctx context.Context) ([]bool, error) {
	if len(dqs.fields) > 1 {
		return nil, errors.New("ent: DNSBLQuerySelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := dqs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) BoolsX(ctx context.Context) []bool {
	v, err := dqs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (dqs *DNSBLQuerySelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = dqs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{dnsblquery.Label}
	default:
		err = fmt.Errorf("ent: DNSBLQuerySelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (dqs *DNSBLQuerySelect) BoolX(ctx context.Context) bool {
	v, err := dqs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dqs *DNSBLQuerySelect) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range dqs.fields {
		if !dnsblquery.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for selection", f)}
		}
	}
	rows := &sql.Rows{}
	query, args := dqs.sqlQuery().Query()
	if err := dqs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (dqs *DNSBLQuerySelect) sqlQuery() sql.Querier {
	selector := dqs.sql
	selector.Select(selector.Columns(dqs.fields...)...)
	return selector
}
