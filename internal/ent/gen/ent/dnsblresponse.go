// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/enmand/dnsbl-query/internel/ent/gen/ent/dnsblresponse"
	"github.com/facebook/ent/dialect/sql"
)

// DNSBLResponse is the model entity for the DNSBLResponse schema.
type DNSBLResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Description holds the value of the "description" field.
	Description           string `json:"description,omitempty"`
	dnsbl_query_responses *string
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSBLResponse) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // code
		&sql.NullString{}, // description
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DNSBLResponse) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // dnsbl_query_responses
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSBLResponse fields.
func (dr *DNSBLResponse) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dnsblresponse.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	dr.ID = string(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[0])
	} else if value.Valid {
		dr.Code = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[1])
	} else if value.Valid {
		dr.Description = value.String
	}
	values = values[2:]
	if len(values) == len(dnsblresponse.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field dnsbl_query_responses", value)
		} else if value.Valid {
			dr.dnsbl_query_responses = new(string)
			*dr.dnsbl_query_responses = string(value.Int64)
		}
	}
	return nil
}

// Update returns a builder for updating this DNSBLResponse.
// Note that, you need to call DNSBLResponse.Unwrap() before calling this method, if this DNSBLResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DNSBLResponse) Update() *DNSBLResponseUpdateOne {
	return (&DNSBLResponseClient{config: dr.config}).UpdateOne(dr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (dr *DNSBLResponse) Unwrap() *DNSBLResponse {
	tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DNSBLResponse is not a transactional entity")
	}
	dr.config.driver = tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DNSBLResponse) String() string {
	var builder strings.Builder
	builder.WriteString("DNSBLResponse(")
	builder.WriteString(fmt.Sprintf("id=%v", dr.ID))
	builder.WriteString(", code=")
	builder.WriteString(dr.Code)
	builder.WriteString(", description=")
	builder.WriteString(dr.Description)
	builder.WriteByte(')')
	return builder.String()
}

// DNSBLResponses is a parsable slice of DNSBLResponse.
type DNSBLResponses []*DNSBLResponse

func (dr DNSBLResponses) config(cfg config) {
	for _i := range dr {
		dr[_i].config = cfg
	}
}
