// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblquery"
	"github.com/enmand/dnsbl-query/internal/ent/gen/ent/dnsblresponse"
	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
)

// DNSBLResponse is the model entity for the DNSBLResponse schema.
type DNSBLResponse struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DNSBLResponseQuery when eager-loading is set.
	Edges                 DNSBLResponseEdges `json:"edges"`
	dnsbl_query_responses *uuid.UUID
}

// DNSBLResponseEdges holds the relations/edges for other nodes in the graph.
type DNSBLResponseEdges struct {
	// Query holds the value of the query edge.
	Query *DNSBLQuery
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QueryOrErr returns the Query value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DNSBLResponseEdges) QueryOrErr() (*DNSBLQuery, error) {
	if e.loadedTypes[0] {
		if e.Query == nil {
			// The edge query was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: dnsblquery.Label}
		}
		return e.Query, nil
	}
	return nil, &NotLoadedError{edge: "query"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DNSBLResponse) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // code
		&sql.NullString{}, // description
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*DNSBLResponse) fkValues() []interface{} {
	return []interface{}{
		&uuid.UUID{}, // dnsbl_query_responses
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DNSBLResponse fields.
func (dr *DNSBLResponse) assignValues(values ...interface{}) error {
	if m, n := len(values), len(dnsblresponse.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		dr.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		dr.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		dr.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field code", values[2])
	} else if value.Valid {
		dr.Code = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[3])
	} else if value.Valid {
		dr.Description = value.String
	}
	values = values[4:]
	if len(values) == len(dnsblresponse.ForeignKeys) {
		if value, ok := values[0].(*uuid.UUID); !ok {
			return fmt.Errorf("unexpected type %T for field dnsbl_query_responses", values[0])
		} else if value != nil {
			dr.dnsbl_query_responses = value
		}
	}
	return nil
}

// QueryQuery queries the query edge of the DNSBLResponse.
func (dr *DNSBLResponse) QueryQuery() *DNSBLQueryQuery {
	return (&DNSBLResponseClient{config: dr.config}).QueryQuery(dr)
}

// Update returns a builder for updating this DNSBLResponse.
// Note that, you need to call DNSBLResponse.Unwrap() before calling this method, if this DNSBLResponse
// was returned from a transaction, and the transaction was committed or rolled back.
func (dr *DNSBLResponse) Update() *DNSBLResponseUpdateOne {
	return (&DNSBLResponseClient{config: dr.config}).UpdateOne(dr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (dr *DNSBLResponse) Unwrap() *DNSBLResponse {
	tx, ok := dr.config.driver.(*txDriver)
	if !ok {
		panic("ent: DNSBLResponse is not a transactional entity")
	}
	dr.config.driver = tx.drv
	return dr
}

// String implements the fmt.Stringer.
func (dr *DNSBLResponse) String() string {
	var builder strings.Builder
	builder.WriteString("DNSBLResponse(")
	builder.WriteString(fmt.Sprintf("id=%v", dr.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(dr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(dr.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", code=")
	builder.WriteString(dr.Code)
	builder.WriteString(", description=")
	builder.WriteString(dr.Description)
	builder.WriteByte(')')
	return builder.String()
}

// DNSBLResponses is a parsable slice of DNSBLResponse.
type DNSBLResponses []*DNSBLResponse

func (dr DNSBLResponses) config(cfg config) {
	for _i := range dr {
		dr[_i].config = cfg
	}
}
